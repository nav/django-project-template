---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-deployment
  labels:
    app: <<app_name>>-web
spec:
  replicas: 2
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: <<app_name>>-web
  template:
    metadata:
      annotations:
        vault.hashicorp.com/agent-requests-cpu: "20m"
        vault.hashicorp.com/agent-limits-cpu: "40m"
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-pre-populate-only: "true"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-token: "true"
        vault.hashicorp.com/agent-inject-secret-config: "secret/data/<<app_name>>"
        vault.hashicorp.com/agent-inject-template-config: |
          {% verbatim %}{{ with secret "secret/data/<<app_name>>" -}}
            export GITHUB_TOKEN="{{ .Data.data.GITHUB_TOKEN }}"
          {{- end }}{% endverbatim %}
        vault.hashicorp.com/auth-path: "auth/kubernetes-<<app_name>>"
        vault.hashicorp.com/role: "<<app_name>>-role"
      labels:
        app: <<app_name>>-web
    spec:
      serviceAccountName: <<app_name>>-vault-auth
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app: <<app_name>>-web
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
      nodeSelector:
        nav.lan/role: app
      volumes:
        - name: shared-data
          emptyDir: {}
      initContainers:
        - name: init-web
          image: <<image>>
          command: ["/bin/sh"]
          workingDir: /app/code
          args:
            [
              "-c",
              "source /vault/secrets/config; git clone --depth=1 --branch=<<branch>> https://$GITHUB_TOKEN@github.com/nav/{{ project_name|slugify }}.git .;",
            ]
          env:
            - name: VAULT_ADDR
              value: http://vault.vault.svc.cluster.local:8200/
          volumeMounts:
            - name: shared-data
              mountPath: /app/code
      containers:
        - name: <<app_name>>-backend
          imagePullPolicy: Always
          image: <<image>>
          workingDir: /app/code
          env:
            - name: AWS_DEFAULT_REGION
              value: us-west-2
            - name: AWS_STORAGE_BUCKET_NAME
              value: { { project_name|slugify } }
            - name: DB_NAME
              value: { { project_name|slugify } }
            - name: DJANGO_SETTINGS_MODULE
              value: project.settings
            - name: FQDN
              value: <<fqdn>>
            - name: PGPASSFILE
              value: .pgpass
            - name: PGSERVICEFILE
              value: .pg_service.conf
            - name: PGSERVICE
              value: app_service
            - name: REDIS_URL
              value: redis://{{ project_name|slugify }}-redis-service:6379/1
            - name: VAULT_ADDR
              value: http://vault.vault.svc.cluster.local:8200/
          command: ["./ops/run", "web"]
          ports:
            - name: http-metrics
              containerPort: 8000
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8000
              scheme: HTTP
              httpHeaders:
                - name: Host
                  value: <<fqdn>>
            initialDelaySeconds: 10
            periodSeconds: 4
          livenessProbe:
            exec:
              command:
                - cat
                - /app/code/is_running
            initialDelaySeconds: 20
            periodSeconds: 10
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            runAsNonRoot: true
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: shared-data
              mountPath: /app/code

---
apiVersion: v1
kind: Service
metadata:
  name: web-service
spec:
  type: NodePort
  selector:
    app: <<app_name>>-web
  ports:
    - name: <<app_name>>-web-http
      protocol: TCP
      port: 8000
      targetPort: 8000
      nodePort: 30107

---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: web-podmonitor
  labels:
    release: prometheus
spec:
  podMetricsEndpoints:
    - port: http-metrics
    - interval: 2s
  selector:
    matchLabels:
      app: <<app_name>>-web
